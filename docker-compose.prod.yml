version: "3.8"

services:
  # Next.js Frontend (no changes)
  app:
    image: aurora1010/marketorix:${FRONTEND_TAG:-latest}
    container_name: marketorix-nextjs
    restart: unless-stopped
    environment:
      - NEXT_PUBLIC_STRAPI_API_URL=https://strapi.marketorix.com
    networks:
      - n8n_default
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.marketorix-app.rule=Host(`${DOMAIN_NAME}`)"
      - "traefik.http.routers.marketorix-app.entrypoints=websecure"
      - "traefik.http.routers.marketorix-app.tls.certresolver=mytlschallenge"
      - "traefik.http.services.marketorix-app.loadbalancer.server.port=3000"

  # Strapi Backend
  strapi:
    # --- THIS IS THE KEY ---
    # We are now using your custom, pre-built, and pre-configured image from Docker Hub.
    image: aurora1010/strapi-app:1.2
    container_name: marketorix-strapi
    restart: unless-stopped
    env_file: .env
    volumes:
      # We no longer mount the project source code.
      # We ONLY mount a volume for persistent file uploads.
      # The path inside the container must match the Dockerfile WORKDIR.
      - strapi-uploads:/opt/app/public/uploads
    # No entrypoint or command is needed. The Dockerfile's CMD is used automatically.
    networks:
      - n8n_default
      - default
    depends_on:
      db:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.marketorix-strapi.rule=Host(`${STRAPI_DOMAIN_NAME}`)"
      - "traefik.http.routers.marketorix-strapi.entrypoints=websecure"
      - "traefik.http.routers.marketorix-strapi.tls.certresolver=mytlschallenge"
      - "traefik.http.services.marketorix-strapi.loadbalancer.server.port=1337"

  # Strapi Database (no changes)
  db:
    container_name: marketorix-db
    image: postgres:15-alpine
    restart: unless-stopped
    env_file: .env
    volumes:
      - strapi-db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - default

# Defines all volumes needed for persistence
volumes:
  strapi-uploads:
  strapi-db-data:

# Defines the networks
networks:
  n8n_default:
    external: true
  default:
    driver: bridge
