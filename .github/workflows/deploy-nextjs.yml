name: Deploy Pre-Built Images to VPS

on:
  push:
    branches:
      - main
  workflow_dispatch: # Allows you to trigger this manually from the Actions tab

jobs:
  deploy:
    name: Deploy from Docker Hub
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to VPS via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_SSH_HOST }}
          username: ${{ secrets.VPS_SSH_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            # Navigate to your project directory on the VPS
            cd ~/marketorix || exit 1

            echo "Creating production .env file from secrets..."
            cat << EOF > .env
            # Server & Environment
            HOST=0.0.0.0
            PORT=1337
            NODE_ENV=production
            # Ensure this is the public URL your frontend will use to call the API
            URL=https://${{ secrets.DOMAIN_NAME }}

            # Application Secrets
            APP_KEYS=${{ secrets.APP_KEYS }}
            API_TOKEN_SALT=${{ secrets.API_TOKEN_SALT }}
            ADMIN_JWT_SECRET=${{ secrets.ADMIN_JWT_SECRET }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            TRANSFER_TOKEN_SALT=${{ secrets.TRANSFER_TOKEN_SALT }}
            ENCRYPTION_KEY=${{ secrets.ENCRYPTION_KEY }}

            # Database Credentials
            POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            POSTGRES_DB=${{ secrets.POSTGRES_DB }}

            # Strapi Database Connection
            DATABASE_CLIENT=postgres
            DATABASE_HOST=db # Docker Compose service name for the database
            DATABASE_PORT=5432
            DATABASE_NAME=${{ secrets.POSTGRES_DB }}
            DATABASE_USERNAME=${{ secrets.POSTGRES_USER }}
            DATABASE_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            DATABASE_SSL=false
            EOF

            # --- THE CRITICAL FIX IS HERE ---
            # Define the compose command once, including the --env-file flag.
            # This makes the variables from .env available for the healthcheck.
            COMPOSE_COMMAND="docker-compose --env-file ./.env -f docker-compose.prod.yml"

            echo "Pulling the latest images for all services..."
            $COMPOSE_COMMAND pull

            echo "Restarting all services with the new images..."
            # This command now runs with the correct variables, fixing the healthcheck.
            $COMPOSE_COMMAND up -d --force-recreate --remove-orphans

            echo "Pruning old, unused Docker images..."
            docker image prune -af

            echo "Deployment complete!"