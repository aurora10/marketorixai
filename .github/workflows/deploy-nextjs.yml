
name: Build and Deploy Frontend

on:
  push:
    branches:
      - main
    # This ensures the workflow only runs when frontend code is changed.
    # If your frontend code is at the root of the repo, remove the 'paths' block.
    paths:
      - 'frontend/**'
      - '.github/workflows/deploy-nextjs.yml'
  workflow_dispatch:

jobs:
  # JOB 1: BUILD AND PUSH THE FRONTEND IMAGE
  build-frontend:
    name: Build Frontend Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU for multi-platform builds
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Next.js Frontend
        uses: docker/build-push-action@v5
        with:
          # IMPORTANT: Set this path to your frontend code folder.
          # If it's at the root of the repo, use '.'
          context: ./frontend
          file: ./frontend/Dockerfile.prod
          platforms: linux/amd64,linux/arm64
          push: true
          tags: aurora1010/marketorix:${{ github.sha }}

  # JOB 2: DEPLOY TO VPS
  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    needs: build-frontend # Wait for the build job to finish first

    steps:
      - name: Deploy to VPS via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_SSH_HOST }}
          username: ${{ secrets.VPS_SSH_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            # --- THIS IS THE CORRECTED LINE ---
            # Navigate to your project directory on the VPS
            cd ~/MARKETORIXAI || exit 1

            echo "Creating production .env file from secrets..."
            cat << EOF > .env
            # Use the unique tag built by the previous job
            FRONTEND_TAG=${{ github.sha }}

            # Domain for Traefik routing
            DOMAIN_NAME=${{ secrets.DOMAIN_NAME }}

            # Server & Environment
            HOST=0.0.0.0
            PORT=1337
            NODE_ENV=production
            URL=https://${{ secrets.DOMAIN_NAME }}

            # Application Secrets
            APP_KEYS=${{ secrets.APP_KEYS }}
            API_TOKEN_SALT=${{ secrets.API_TOKEN_SALT }}
            ADMIN_JWT_SECRET=${{ secrets.ADMIN_JWT_SECRET }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            TRANSFER_TOKEN_SALT=${{ secrets.TRANSFER_TOKEN_SALT }}
            ENCRYPTION_KEY=${{ secrets.ENCRYPTION_KEY }}

            # Database Credentials
            POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            POSTGRES_DB=${{ secrets.POSTGRES_DB }}

            # Strapi Database Connection
            DATABASE_CLIENT=postgres
            DATABASE_HOST=db
            DATABASE_PORT=5432
            DATABASE_NAME=${{ secrets.POSTGRES_DB }}
            DATABASE_USERNAME=${{ secrets.POSTGRES_USER }}
            DATABASE_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            DATABASE_SSL=false
            EOF

            # Your original commands remain the same.
            COMPOSE_COMMAND="docker-compose --env-file ./.env -f docker-compose.prod.yml"

            echo "Pulling the latest images for all services..."
            $COMPOSE_COMMAND pull

            echo "Restarting all services with the new images..."
            $COMPOSE_COMMAND up -d --force-recreate --remove-orphans

            echo "Pruning old, unused Docker images..."
            docker image prune -af

            echo "Deployment complete!"