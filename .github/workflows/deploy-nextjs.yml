# This is the complete workflow file with added diagnostics.
# It will help identify path or permission errors on your server.

name: Deploy Pre-Built Images to VPS

on:
  push:
    branches:
      - main
  workflow_dispatch: # Allows you to trigger this manually from the Actions tab

jobs:
  deploy:
    name: Deploy from Docker Hub
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to VPS via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_SSH_HOST }}
          username: ${{ secrets.VPS_SSH_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            # --- START DIAGNOSTICS ---
            echo "Step 1: Verifying user and location..."
            whoami
            pwd
            
            echo "Step 2: Checking if project directory exists..."
            ls -ld ~/marketorix
            
            # --- END DIAGNOSTICS ---

            # Navigate to your project directory on the VPS
            cd ~/marketorix || exit 1

            # --- MORE DIAGNOSTICS ---
            echo "Step 3: Successfully entered project directory. Current location:"
            pwd
            
            echo "Step 4: Listing files and permissions BEFORE writing .env file..."
            ls -la
            # --- END DIAGNOSTICS ---

            echo "Step 5: Attempting to create production .env file from secrets..."
            cat << EOF > .env
            # Server & Environment
            DOMAIN_NAME=${{ secrets.DOMAIN_NAME }}
            HOST=0.0.0.0
            PORT=1337
            NODE_ENV=production
            URL=https://${{ secrets.DOMAIN_NAME }}

            # Application Secrets
            APP_KEYS=${{ secrets.APP_KEYS }}
            API_TOKEN_SALT=${{ secrets.API_TOKEN_SALT }}
            ADMIN_JWT_SECRET=${{ secrets.ADMIN_JWT_SECRET }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            TRANSFER_TOKEN_SALT=${{ secrets.TRANSFER_TOKEN_SALT }}
            ENCRYPTION_KEY=${{ secrets.ENCRYPTION_KEY }}

            # Database Credentials used by the PostgreSQL container
            POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            POSTGRES_DB=${{ secrets.POSTGRES_DB }}

            # Strapi Database Connection
            DATABASE_CLIENT=postgres
            DATABASE_HOST=db # Docker Compose service name for the database
            DATABASE_PORT=5432
            DATABASE_NAME=${{ secrets.POSTGRES_DB }}
            DATABASE_USERNAME=${{ secrets.POSTGRES_USER }}
            DATABASE_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            DATABASE_SSL=false
            EOF
            
            # --- FINAL DIAGNOSTICS ---
            echo "Step 6: Verifying the .env file was created correctly..."
            echo "--- .env file contents START ---"
            cat .env
            echo "--- .env file contents END ---"
            # --- END DIAGNOSTICS ---

            COMPOSE_COMMAND="docker-compose --env-file ./.env -f docker-compose.prod.yml"

            echo "Step 7: Pulling the latest images..."
            $COMPOSE_COMMAND pull

            echo "Step 8: Restarting all services..."
            $COMPOSE_COMMAND up -d --force-recreate --remove-orphans

            echo "Step 9: Pruning old images..."
            docker image prune -af

            echo "Deployment complete!"
